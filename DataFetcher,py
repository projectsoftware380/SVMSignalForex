import requests
import pandas as pd
from datetime import datetime, timedelta

class DataFetcher:
    def __init__(self, api_key_polygon):
        self.api_key_polygon = api_key_polygon

    def obtener_datos(self, symbol, timeframe='hour', range='1', days=10):
        # Obtener fechas para la solicitud
        fecha_actual = datetime.utcnow().strftime('%Y-%m-%d')
        fecha_inicio = (datetime.utcnow() - timedelta(days=days)).strftime('%Y-%m-%d')
        
        # Construir la URL de la API
        url = f"https://api.polygon.io/v2/aggs/ticker/C:{symbol}/range/{range}/{timeframe}/{fecha_inicio}/{fecha_actual}"
        params = {
            "adjusted": "true",
            "sort": "asc",
            "apiKey": self.api_key_polygon
        }
        
        # Hacer la solicitud
        response = requests.get(url, params=params)
        if response.status_code != 200:
            raise ValueError(f"Error al obtener datos de la API para {symbol}: {response.status_code}")
        
        data = response.json()
        if 'results' in data:
            df = pd.DataFrame(data['results'])
            df['timestamp'] = pd.to_datetime(df['t'], unit='ms', utc=True)
            df.set_index('timestamp', inplace=True)
            df.rename(columns={'o': 'Open', 'h': 'High', 'l': 'Low', 'c': 'Close', 'v': 'Volume'}, inplace=True)
            print(f"Datos obtenidos para {symbol}:")
            print(df.head())  # Mostrar los primeros registros para validaci√≥n
            return df[['Open', 'High', 'Low', 'Close', 'Volume']]
        else:
            raise ValueError(f"No se pudieron obtener datos de la API para {symbol}.")
